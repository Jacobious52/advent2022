{"message":"the trait bound `TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>: chumsky::Parser<_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":437,"byte_end":806,"line_start":22,"line_end":33,"column_start":25,"column_end":6,"is_primary":true,"text":[{"text":"    let junk = any().or(take_until(","highlight_start":25,"highlight_end":36},{"text":"        just(\"move\")","highlight_start":1,"highlight_end":21},{"text":"            .then(number.clone())","highlight_start":1,"highlight_end":34},{"text":"            .then_ignore(just(\"from\"))","highlight_start":1,"highlight_end":39},{"text":"            .then(number.clone())","highlight_start":1,"highlight_end":34},{"text":"            .then_ignore(just(\"to\"))","highlight_start":1,"highlight_end":37},{"text":"            .then(number.clone())","highlight_start":1,"highlight_end":34},{"text":"            .map(|(((_, count), from), to)| Instr { count, from, to })","highlight_start":1,"highlight_end":71},{"text":"            .repeated()","highlight_start":1,"highlight_end":24},{"text":"            .at_least(1)","highlight_start":1,"highlight_end":25},{"text":"            .then_ignore(end()),","highlight_start":1,"highlight_end":33},{"text":"    ));","highlight_start":1,"highlight_end":6}],"label":"the trait `chumsky::Parser<_, _>` is not implemented for `TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":434,"byte_end":436,"line_start":22,"line_end":22,"column_start":22,"column_end":24,"is_primary":false,"text":[{"text":"    let junk = any().or(take_until(","highlight_start":22,"highlight_end":24}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `chumsky::Parser<I, (Vec<I>, O)>` is implemented for `TakeUntil<A>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `or`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":"required by a bound in this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/jacob/.cargo/registry/src/github.com-1ecc6299db9ec823/chumsky-0.8.0/src/lib.rs","byte_start":33880,"byte_end":33913,"line_start":911,"line_end":911,"column_start":12,"column_end":45,"is_primary":true,"text":[{"text":"        P: Parser<I, O, Error = Self::Error>,","highlight_start":12,"highlight_end":45}],"label":"required by this bound in `or`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>: chumsky::Parser<_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:22:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let junk = any().or(take_until(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m______________________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        just(\"move\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .then(number.clone())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .then_ignore(just(\"from\"))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .then_ignore(end()),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `chumsky::Parser<_, _>` is not implemented for `TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `chumsky::Parser<I, (Vec<I>, O)>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1mTakeUntil<A>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `or`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/jacob/.cargo/registry/src/github.com-1ecc6299db9ec823/chumsky-0.8.0/src/lib.rs:911:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m911\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        P: Parser<I, O, Error = Self::Error>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `or`\u001b[0m\n\n"}
{"message":"the trait bound `chumsky::primitive::Filter<for<'a> fn(&'a _) -> bool, _>: chumsky::Parser<char, Vec<Instr>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":256,"byte_end":307,"line_start":17,"line_end":17,"column_start":16,"column_end":67,"is_primary":true,"text":[{"text":"fn parser() -> impl Parser<char, Vec<Instr>, Error = Simple<char>> {","highlight_start":16,"highlight_end":67}],"label":"the trait `chumsky::Parser<char, Vec<Instr>>` is not implemented for `chumsky::primitive::Filter<for<'a> fn(&'a _) -> bool, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":256,"byte_end":307,"line_start":17,"line_end":17,"column_start":16,"column_end":67,"is_primary":false,"text":[{"text":"fn parser() -> impl Parser<char, Vec<Instr>, Error = Simple<char>> {","highlight_start":16,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `chumsky::Parser<I, I>` is implemented for `chumsky::primitive::Filter<F, E>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Or<chumsky::primitive::Filter<for<'a> fn(&'a _) -> bool, _>, TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>>` to implement `chumsky::Parser<char, Vec<Instr>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `chumsky::primitive::Filter<for<'a> fn(&'a _) -> bool, _>: chumsky::Parser<char, Vec<Instr>>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:17:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn parser() -> impl Parser<char, Vec<Instr>, Error = Simple<char>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `chumsky::Parser<char, Vec<Instr>>` is not implemented for `chumsky::primitive::Filter<for<'a> fn(&'a _) -> bool, _>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `chumsky::Parser<I, I>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1mchumsky::primitive::Filter<F, E>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Or<chumsky::primitive::Filter<for<'a> fn(&'a _) -> bool, _>, TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>>` to implement `chumsky::Parser<char, Vec<Instr>>`\u001b[0m\n\n"}
{"message":"the trait bound `TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>: chumsky::Parser<char, Vec<Instr>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":256,"byte_end":307,"line_start":17,"line_end":17,"column_start":16,"column_end":67,"is_primary":true,"text":[{"text":"fn parser() -> impl Parser<char, Vec<Instr>, Error = Simple<char>> {","highlight_start":16,"highlight_end":67}],"label":"the trait `chumsky::Parser<char, Vec<Instr>>` is not implemented for `TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":256,"byte_end":307,"line_start":17,"line_end":17,"column_start":16,"column_end":67,"is_primary":false,"text":[{"text":"fn parser() -> impl Parser<char, Vec<Instr>, Error = Simple<char>> {","highlight_start":16,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `chumsky::Parser<I, (Vec<I>, O)>` is implemented for `TakeUntil<A>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Or<chumsky::primitive::Filter<for<'a> fn(&'a _) -> bool, _>, TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>>` to implement `chumsky::Parser<char, Vec<Instr>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>: chumsky::Parser<char, Vec<Instr>>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:17:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn parser() -> impl Parser<char, Vec<Instr>, Error = Simple<char>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `chumsky::Parser<char, Vec<Instr>>` is not implemented for `TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `chumsky::Parser<I, (Vec<I>, O)>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1mTakeUntil<A>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Or<chumsky::primitive::Filter<for<'a> fn(&'a _) -> bool, _>, TakeUntil<chumsky::combinator::Map<Then<Repeated<chumsky::combinator::Map<Then<chumsky::combinator::Map<Then<Then<chumsky::combinator::Map<Then<Then<Just<_, &str, _>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn(((&str, u32), &str)) -> (&str, u32), ((&str, u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, Just<_, &str, _>>, fn((((&str, u32), u32), &str)) -> ((&str, u32), u32), (((&str, u32), u32), &str)>, Padded<chumsky::combinator::Map<impl chumsky::Parser<_, <_ as Character>::Collection, Error = _> + Copy + Clone, [closure@src/main.rs:19:14: 19:25], String>>>, [closure@src/main.rs:29:18: 29:44], (((&str, u32), u32), u32)>>, chumsky::primitive::End<_>>, fn((Vec<Instr>, ())) -> Vec<Instr>, (Vec<Instr>, ())>>>` to implement `chumsky::Parser<char, Vec<Instr>>`\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
